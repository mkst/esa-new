#include "common.h"

s16 D_800E546C;
u8  D_800E546E[6];
s16 D_800E5474;
u8  D_800E5476[6];
s16 D_800E547C;

typedef struct {
  s8 unk0;
  s8 unk1;
} unk001;

extern unk001 D_800D8F60[];
extern s32 D_800E52A8;
extern u8  D_800E525C;
extern s32  D_800EA9E8;
extern s16  D_800E52C8;
extern s16  D_800E52D8;
extern struct006 **D_800E5284;

void func_800463C4(void);
void func_8004D86C(struct004*);
void func_8007F278(void);
void func_8007F684(void);
void func_8008175C(void);
void play_sound_effect_at_location(s32, s32, s32);


typedef struct {
  s32 unk0;
} unk000;


// sssv:func_8032A710_73BDC0
#if 0
void func_800813C8(void) {
    s16 temp_17;
    s16 temp_5;
    s16 temp_5_2;
    s16 temp_5_3;
    s32 temp_3_4;
    s32 temp_5_6;
    s32 temp_6;
    s16 var_6;
    s32 var_8;
    struct000 *temp_10;
    struct000 *temp_2_3;
    struct000 *temp_2_6;
    struct000 *temp_3;
    struct000 *temp_3_2;
    struct002 *temp_17_2;
    struct002 *temp_2_4;
    struct004 *temp_2_7;
    struct005 *temp_2;
    struct005 *temp_5_5;
    u16 animalType; // e.g. FIRE_FOX
    u8 temp_5_7;
    struct000 **temp_9;
    struct000 *temp_2_2;
    struct004 *temp_2_5; // tbd
    struct004 *temp_3_3; // tbd
    // struct000 *temp_5_4;

    // temp_2 = D_800E5274;
    temp_17 = D_800E5274->unk32E;
    D_800E5274->unk340 = NULL;
    func_8008175C();
    temp_3 = D_800E73A8.animals[0].animal;
    temp_9 = (temp_17 * 8) + &D_800E73A8.animals[0].animal;
    temp_2_2 = *temp_9;

    temp_5 = temp_2_2->unk14C;
    temp_2_2->unk14C = D_800E73A8.animals[0].animal->unk14C;
    temp_3->unk14C = temp_5;

    temp_5_2 = temp_2_2->unk300;
    temp_2_2->unk300 = temp_3->unk300;
    temp_3->unk300 = (u16) temp_5_2;

    temp_5_3 = temp_2_2->unk304;
    temp_2_2->unk304 = (s16) temp_3->unk304;
    temp_3->unk304 = (u16) temp_5_3;

    temp_3->unk4A = 0;
    temp_2_2->unk4A = 0;
    temp_10 = D_800E73A8.animals[0].animal;
    temp_6 = temp_10->unk4C;
    temp_10->unk4C = (s32) ((temp_6 & 0xFBFFFFFF) | (temp_2_2->unk4C & 0x04000000));
    temp_2_2->unk4C = (s32) ((temp_2_2->unk4C & 0xFBFFFFFF) | (temp_6 & 0x04000000));

    temp_2_3 = D_800E73A8.animals[0].animal;
    D_800E529C = (struct006 *) D_800E73A8.animals[0].unk0;
    D_800E5284 = D_800E73A8.animals;
    D_800E52A8 = temp_2_3;
    D_800E5274 = (struct005 *) temp_2_3;
    D_800E527C = (struct004 *) temp_2_3;
    if (gCurrentAnimalIndex == 0) {
        D_800E525C = 1;
    } else {
        D_800E525C = 0;
    }
    D_800E5284->unk0 = &D_800EA9E8;
    temp_2_4 = (temp_17 * 8) + (&D_800EA9E8 + 0x540);
    temp_3_2 = temp_2_4->animal;
    D_800E52C8 = 0;
    D_800E52D8 = 0;
    gCurrentAnimalIndex = temp_17;
    D_800E5284 = temp_2_4;
    D_800E527C->unk16C = &D_800EA9E8;
    D_800E52A8 = temp_3_2;
    D_800E5274 = (struct005 *) temp_3_2;
    D_800E527C = (struct004 *) temp_3_2;
    D_800E529C = temp_2_4->unk0;
    if (gCurrentAnimalIndex == temp_17) {
        D_800E525C = 1;
    } else {
        D_800E525C = 0;
    }
    D_800E52C8 = temp_17;
    D_800E52D8 = 0;
    D_800E5274->unk386 = 1;
    D_800E5274->unk348 = D_800E52C0;
    D_800E5274->unk38A = 2;
    D_800E527C->unk163 = D_800E73A8.animals[0].animal->unk163; //unk44[0x11F];
    D_800E527C->unk18C = D_800E73A8.animals[0].animal->unk18C; //unk44[0x148];

    for (var_6 = 0; var_6 < 4; var_6++)  {
        D_800E527C->unk18D[var_6] = D_800E73A8.animals[0].animal->unk18D[var_6];
    }
    D_800E527C->unk18C = (u8) D_800E73A8.animals[0].animal->unk18C; //unk44[0x148];

    animalType = D_800E73A8.animals[temp_17].unk0->unk90;
    temp_3_4 = (s16) animalType * 2;
    temp_5_7 = D_800D8F60[animalType].unk0; //*(temp_3_4 + &D_800D8F60);
    D_800E546C = animalType;
    D_800E547C = (s16) (s8) temp_5_7;
    D_800E5474 = D_800D8F60[animalType].unk1; //(s16) (s8) *(temp_3_4 + 1 + &D_800D8F60);
    func_80081878((s16) animalType, (s8) temp_5_7, &D_800D8F60, animalType);
    func_8007F278();
    func_8007F684();
    func_800463C4();
    func_8004D86C(D_800E527C); // set species as encountered?
    temp_2_6 = D_800E73A8.animals[0].animal;
    D_800E5284 = temp_17_2;
    D_800E529C = (struct006 *) D_800E73A8.animals[0].unk0;
    D_800E52A8 = temp_2_6;
    D_800E5274 = (struct005 *) temp_2_6;
    D_800E527C = (struct004 *) temp_2_6;

    if (gCurrentAnimalIndex == 0) {
        D_800E525C = 1;
    } else {
        D_800E525C = 0;
    }

    D_800E52C8 = 0;
    D_800E52D8 = 0;
    play_sound_effect_at_location(0x28, D_800E527C->xPos, D_800E527C->zPos);
}
#else
INCLUDE_ASM("asm/esa/nonmatchings/719C8", func_800813C8);
#endif

#if 0
void func_8008175C(void) {
    u16 temp_5;

    func_8008202C(D_800E5274->unk340, 0, 0);
    temp_5 = D_800E527C->state;
    D_800E5274->unk340 = NULL;
    if (temp_5 == 0xDD) {
        func_80088268();
    }
}
#else
INCLUDE_ASM("asm/esa/nonmatchings/719C8", func_8008175C);
#endif

#if 0
void load_animal(s16 animalId) {
    *D_800E5284 = &D_800E73A8.unk0[animalId];
    D_800E527C->unk16C = &D_800E73A8.unk0[animalId];

    D_800E546C = animalId;

    D_800E547C = D_800D8F60[animalId].unk0;
    D_800E5474 = D_800D8F60[animalId].unk1;

    func_8007F278();
    D_800E527C->unk46 = D_800E527C->unk16C->unk7C; // mass
    func_8004D86C(D_800E527C);
    D_800E529C = *D_800E5284;
}
#else
INCLUDE_ASM("asm/esa/nonmatchings/719C8", load_animal);
#endif

INCLUDE_ASM("asm/esa/nonmatchings/719C8", func_80081878);

#if 0
s16 D_800E5480;
s16 D_800E5482;

void func_800818D8(void) {
    s16 e0 = D_800E5274->skillAEnergy[0].unk0;
    s16 e1 = D_800E5274->skillAEnergy[1].unk0;

    D_800E5274->skillAEnergy[0].unk0 = MIN(0x400, D_800E5274->skillAEnergy[0].unk0 + D_800E529C->unkCE[0][1]);
    if (D_800E5274->skillAEnergy[0].unk2 != 0x7FFF && D_800E5274->skillAEnergy[0].unk2 != 0x7FFE) {
        D_800E5274->skillAEnergy[0].unk2 = MAX(0, D_800E5274->skillAEnergy[0].unk2 - 1);
    }
    D_800E5274->skillAEnergy[1].unk0 = MIN(0x400, D_800E5274->skillAEnergy[1].unk0 + D_800E529C->unkCE[1][1]);
    if (D_800E5274->skillAEnergy[1].unk2 != 0x7FFF && D_800E5274->skillAEnergy[1].unk2 != 0x7FFE) {
        D_800E5274->skillAEnergy[1].unk2 = MAX(0, D_800E5274->skillAEnergy[1].unk2 - 1);
    }

    D_800E5480 = D_800E5482 = 0;
}
#else
INCLUDE_ASM("asm/esa/nonmatchings/719C8", func_800818D8);
#endif
